name: travelblog-gitops

on:
  workflow_dispatch:
    inputs:
      FRONTEND_DOCKER_TAG:
        required: true
        description: "Frontend Docker tag (e.g., 1.0.0)"
      BACKEND_DOCKER_TAG:
        required: true
        description: "Backend Docker tag (e.g., 1.0.0)"
  workflow_call:
    inputs:
      FRONTEND_DOCKER_TAG: { type: string, required: true }
      BACKEND_DOCKER_TAG:  { type: string, required: true }
    secrets:
      SONAR_HOST_URL:      { required: false }
      SONAR_TOKEN:         { required: false }
      DOCKERHUB_USERNAME:  { required: false }
      DOCKERHUB_TOKEN:     { required: false }

permissions:
  contents: write
  pull-requests: write

env:
  # Folder and files your Jenkinsfile edited:
  GITOPS_DIR: kubernetes
  BACKEND_YAML: backend.yaml
  FRONTEND_YAML: frontend.yaml
  BACKEND_IMAGE_NAME: wanderlust-backend-beta
  FRONTEND_IMAGE_NAME: wanderlust-frontend-beta

jobs:
  Workspace_cleanup:
    name: Workspace cleanup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Clean untracked files (cleanWs equivalent)
        run: |
          git reset --hard
          git clean -fdx

  Git_Code_Checkout:
    name: "Git: Code Checkout"
    runs-on: ubuntu-latest
    needs: Workspace_cleanup
    steps:
      - uses: actions/checkout@v4

  Verify_Docker_Image_Tags:
    name: "Verify: Docker Image Tags"
    runs-on: ubuntu-latest
    needs: Git_Code_Checkout
    steps:
      - uses: actions/checkout@v4
      - name: Echo inputs
        run: |
          echo "FRONTEND_DOCKER_TAG=${{ inputs.FRONTEND_DOCKER_TAG }}"
          echo "BACKEND_DOCKER_TAG=${{ inputs.BACKEND_DOCKER_TAG }}"

  Update_Kubernetes_manifests:
    name: "Update: Kubernetes manifests"
    runs-on: ubuntu-latest
    needs: Verify_Docker_Image_Tags
    steps:
      - uses: actions/checkout@v4

      - name: Ensure target files exist (or fail with a helpful message)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${{ env.GITOPS_DIR }}/${{ env.BACKEND_YAML }}" ] || [ ! -f "${{ env.GITOPS_DIR }}/${{ env.FRONTEND_YAML }}" ]; then
            echo "Expected files:"
            echo "  ${{ env.GITOPS_DIR }}/${{ env.BACKEND_YAML }}"
            echo "  ${{ env.GITOPS_DIR }}/${{ env.FRONTEND_YAML }}"
            echo "Not found. Update env(GITOPS_DIR/BACKEND_YAML/FRONTEND_YAML) to match your repo."
            exit 1
          fi

      - name: Bump image tags via sed (like Jenkins)
        shell: bash
        run: |
          set -euo pipefail
          BE_TAG="${{ inputs.BACKEND_DOCKER_TAG }}"
          FE_TAG="${{ inputs.FRONTEND_DOCKER_TAG }}"
          BE_IMG="${{ env.BACKEND_IMAGE_NAME }}"
          FE_IMG="${{ env.FRONTEND_IMAGE_NAME }}"

          pushd "${{ env.GITOPS_DIR }}" > /dev/null

          # Replace any existing tag for each image with the new tag
          sed -E -i "s|(${BE_IMG}:)[^\"' >]+|\\1${BE_TAG}|g" "${{ env.BACKEND_YAML }}"
          sed -E -i "s|(${FE_IMG}:)[^\"' >]+|\\1${FE_TAG}|g" "${{ env.FRONTEND_YAML }}"

          echo "After replacements:"
          grep -nE "${BE_IMG}|${FE_IMG}" "${{ env.BACKEND_YAML }}" "${{ env.FRONTEND_YAML }}" || true

          popd > /dev/null

      - name: Show diff
        shell: bash
        run: |
          git status --porcelain
          git --no-pager diff || true

  Git_Code_update_and_push_to_GitHub:
    name: "Git: Code update and push to GitHub (PR)"
    runs-on: ubuntu-latest
    needs: Update_Kubernetes_manifests
    steps:
      - uses: actions/checkout@v4

      - name: Commit changes
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ env.GITOPS_DIR }}/${{ env.BACKEND_YAML }}" "${{ env.GITOPS_DIR }}/${{ env.FRONTEND_YAML }}" || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            git commit -m "GitOps: bump images to backend=${{ inputs.BACKEND_DOCKER_TAG }}, frontend=${{ inputs.FRONTEND_DOCKER_TAG }}"
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi
        id: commit

      - name: Create Pull Request
        if: steps.commit.outputs.no_changes == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: |
            GitOps: bump images
            - backend: ${{ env.BACKEND_IMAGE_NAME }}:${{ inputs.BACKEND_DOCKER_TAG }}
            - frontend: ${{ env.FRONTEND_IMAGE_NAME }}:${{ inputs.FRONTEND_DOCKER_TAG }}
          title: "GitOps: bump image tags"
          body: |
            Automated update:
            - `${{ env.BACKEND_IMAGE_NAME }}:${{ inputs.BACKEND_DOCKER_TAG }}`
            - `${{ env.FRONTEND_IMAGE_NAME }}:${{ inputs.FRONTEND_DOCKER_TAG }}`
          branch: gitops/bump-${{ github.run_id }}
          base: main
          labels: |
            gitops
            automated

  Post-Build:
    if: always()
    name: Post Build
    runs-on: ubuntu-latest
    needs:
      - Workspace_cleanup
      - Git_Code_Checkout
      - Verify_Docker_Image_Tags
      - Update_Kubernetes_manifests
      - Git_Code_update_and_push_to_GitHub
    steps:
      - name: snapshot post build workflow status
        id: post_build
        run: |
          echo "success=${{ contains(needs.*.result,'success') && !contains(needs.*.result,'cancelled') && !contains(needs.*.result,'failure') }}" >> $GITHUB_OUTPUT
          echo "failure=${{ contains(needs.*.result,'failure') && !contains(needs.*.result,'cancelled') }}" >> $GITHUB_OUTPUT

      # Optional: email notifications require SMTP creds; uncomment if you configure them.
      # - name: Send failure email
      #   if: steps.post_build.outputs.failure == 'true'
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.SMTP_SERVER }}
      #     server_port: 587
      #     username: ${{ secrets.SMTP_USERNAME }}
      #     password: ${{ secrets.SMTP_PASSWORD }}
      #     subject: "Travelblog GitOps workflow failed"
      #     to: "ankitgup.05@gmail.com"
      #     from: "GitHub Actions <noreply@github.com>"
      #     body: "GitOps update failed for run ${{ github.run_id }}."
